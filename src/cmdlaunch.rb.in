#!/usr/bin/ruby

# Copyright (C) 2019 Open Source Robotics Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# We use 'dl' for Ruby <= 1.9.x and 'fiddle' for Ruby >= 2.0.x
if RUBY_VERSION.split('.')[0] < '2'
  require 'dl'
  require 'dl/import'
  include DL
else
  require 'fiddle'
  require 'fiddle/import'
  include Fiddle
end

require 'optparse'
require 'erb'

# Constants.
LIBRARY_NAME = '@IGN_LIBRARY_NAME@'
LIBRARY_VERSION = '@PROJECT_VERSION_FULL@'

COMMON_OPTIONS =
               "  -h [--help]              Print this help message.\n"\
               "                                                    \n"        +
               "  --force-version <VERSION>  Use a specific library version.\n"\
               "                                                    \n"        +
               '  --versions                 Show the available versions.'

COMMANDS = { 'launch' =>
  "Manage executables and plugins.                                         \n"\
  "                                                                        \n"\
  "  ign launch [options] [launch_file]                                    \n"\
  "                                                                        \n"\
  "                                                                        \n"\
  "Available Options:                                                      \n"\
  "  -v [ --verbose ] [arg]   Adjust the level of console output (0~4).    \n"\
  "                           The default verbosity is 1, use -v without   \n"\
  "                           arguments for level 3.                       \n" +
  COMMON_OPTIONS
}

#
# Class for the Ignition Fuel command line tools.
#
class Cmd
  # Command-line variable bindings.
  @variableBinding

  # Initialize the class
  def initialize()
    @variableBinding = binding
  end

  #
  # Return a structure describing the options.
  #
  def parse(args)
    options = {
      'verbose' => '1',
    }

    usage = COMMANDS[args[0]]

    opt_parser = OptionParser.new do |opts|
      opts.banner = usage

      opts.on('-h', '--help') do
        puts usage
        exit
      end
      opts.on('-v [verbose]', '--verbose [verbose]', String,
          'Adjust level of console output') do |v|
        options['verbose'] = v || '3'
      end
    end # opt_parser do

    opt_parser.parse!(args)

    while !args.empty?
      arg = args.shift
      # Store variables if the := is present
      if arg.include?(":=")
        name, value = arg.split(/:=/)

        # Make sure the name is present. It's okay if the value is empty or
        # nil, in case the user wants to explicity clear a variable.
        if name != nil && !name.empty?
          @variableBinding.local_variable_set("#{name}", value)
        else
          puts "Missing varialbe name in argument: #{arg}"
        end

      # Launch file as positional argument
      elsif arg and arg != 'launch' and not options.key?('file')
        options['file'] = arg
      # Store the command
      elsif not options.key?('command')
        options['command'] = arg
      else
        puts "Error processing command line argument: #{arg}"
      end
    end

    options
  end # parse()

  def execute(args)
    options = parse(args)

    # Read the plugin that handles the command.
    plugin = LIBRARY_NAME
    conf_version = LIBRARY_VERSION

    begin
      Importer.dlload plugin
    rescue DLError
      puts "Library error: [#{plugin}] not found."
      exit(-1)
    end

    # Read the library version.
    Importer.extern 'char* ignitionVersion()'
    begin
      plugin_version = Importer.ignitionVersion.to_s
    rescue DLError
      puts "Library error: Problem running 'ignitionVersion()' from #{plugin}."
      exit(-1)
    end

    # Sanity check: Verify that the version of the yaml file matches the version
    # of the library that we are using.
    unless plugin_version.eql? conf_version
      puts "Error: Version mismatch. Your configuration file version is
            [#{conf_version}] but #{plugin} version is [#{plugin_version}]."
      exit(-1)
    end

    usage = COMMANDS[args[0]]

    begin

      # Global configurations
      if options.key?('verbose')
        Importer.extern 'void cmdVerbosity(const char *)'
        Importer.cmdVerbosity(options['verbose'])
      end

      if options.key?('file')
        # Check if the passed in file exists.
        path = ''
        if File.exists?(options['file'])
          path = options['file']
        end
        # If not, then first check the IGN_LAUNCH_CONFIG_PATH environment
        # variable, then the configuration path from the launch library.
        if path.empty?
          configPathEnv = ENV['IGN_LAUNCH_CONFIG_PATH']
          if !configPathEnv.nil?
            configPaths = configPathEnv.split(File::PATH_SEPARATOR)
            for configPath in configPaths
              filePath = File.join(configPath, options['file'])
              if File.exists?(filePath)
                path = filePath
                break
              end
            end
          end
        end
        # get the configuration path from the launch library.
        if path.empty?
          Importer.extern 'char *configPath()'
          path = File.join(Importer.configPath().to_s, options['file'])
        end
        if path.empty? or !File.exists?(path)
          puts "Unable to find file " + options['file']
          exit(-1)
        end

        # ERB parse the file with the variable bindings
        begin
          erb = ERB.new(File.read(path))
          erb.filename = path
          parsed = erb.result(@variableBinding)

          # todo(nkoenig) Also ERB parse <world_file> elements inside
          # a launch configuration. This will allow use to pass variables
          # all the way down through the world and (eventually) model files.
          # An approach would be to find the <world_file> tags using a Ruby XML
          # parser, and ERB each file. The <world_file> tag would be
          # changed to something like <world_string>. We would probably need
          # a helper function to find the location on disk of the
          # <world_file>.
        rescue Exception => e
          puts "Failed to parse #{path} because of #{e}"
          exit(-1)
        end

        # Run the parsed file.
        Importer.extern 'int run(const char *)'
        if not Importer.run(parsed)
          exit(-1)
        end
      else
        puts usage
      end
    rescue
      puts "Library error: Problem running [#{options['command']}]() "\
           "from @IGN_LIBRARY_NAME@."
    end # begin
  end # execute
end # class
